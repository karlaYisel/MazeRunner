@inject NavigationManager NavMg

@page "/GameDisplay"

<PageTitle>MazeRunner</PageTitle> 

<div class="container center-content" id="page-container">
    <div class="container in-game-menu" id="player-menu">
        <div class="fill-content">
            <div class = "row justify-content-center" >
                <div style="min-width: 94px; width: 50%;">
                    <ItemDisplay path="@($"img/{numberOfActualPlayer}.png")" />
                </div>
            </div>        
            <div class = "row justify-content-center">
                @if(numberOfActualPlayer == 5)
                {
                    <h2>NPC</h2>
                }
                else
                {
                    <h2>Jugador @numberOfActualPlayer</h2>
                }
                <h3>@player.Name</h3>
            </div>  
                @switch(status)
                {
                    case OperationStatus.ActionSelection:
                        <div class = "row justify-content-center"> 
                            <button class="btn btn-menu col-xl-10 col-lg-10 col-md-10 col-sm-10 col-10" @onclick="() => status = OperationStatus.TokenSelection">Seleccionar Token</button>
                        </div>
                        break;
                    case OperationStatus.TokenAction:
                        @if(selectedToken is PlayableCharacter playable)
                        {
                            <div class = "row justify-content-center"> 
                                <button class="btn btn-menu col-xl-10 col-lg-10 col-md-10 col-sm-10 col-10" @onclick="Move">Mover</button> 
                            </div>
                            <div class = "row justify-content-center"> 
                                <button class="btn btn-menu col-xl-10 col-lg-10 col-md-10 col-sm-10 col-10" @onclick="Attack">Atacar</button> 
                            </div>
                            <div class = "row justify-content-center"> 
                                <button class="btn btn-menu col-xl-10 col-lg-10 col-md-10 col-sm-10 col-10" @onclick="Ability">Especial</button>
                            </div>
                        }
                        break;
                    default:
                        break;
                }
                @if(status !=  OperationStatus.Break && status != OperationStatus.MovingToken && status != OperationStatus.AttackingToken && status != OperationStatus.UsingAbilityToken)
                {
                    @if(status != OperationStatus.ActionSelection)
                    {
                        <div class = "row justify-content-center"> 
                            <button class="btn btn-menu col-xl-10 col-lg-10 col-md-10 col-sm-10 col-10" @onclick="Back">Atrás</button>
                        </div>
                    }
                    <div class = "row justify-content-center"> 
                        <button class="btn btn-menu col-xl-10 col-lg-10 col-md-10 col-sm-10 col-10" @onclick="PassTurn">Pasar Turno</button>
                    </div>
                }
        </div>
    </div>
    <div class="maze-box">
        <div class="cells-grid container" style="min-width: @(32*GM.maze.Width)px;">
            @for (int x = 0; x < GM.maze.Grid.GetLength(0); x++)
            {
                <div class="row justify-content-center">
                @for (int y = 0; y < GM.maze.Grid.GetLength(1); y++)
                { 
                    <CellComponent cell="@GM.maze.Grid[x, y]" selectedToken="@selectedToken" OnClick="(args) => Select(args.X, args.Y, args.token)" />
                }
                </div>
            }
        </div>
    </div>
    <div class="textbox in-game-menu"> 
        <div class="fill-content container">
            <div class="row justify-content-center">
                <h3></h3>
            </div>
            @for(int i = textForTextbox.Count - 1; i >= 0; i--)
            {
                <div class="row justify-content-center">
                    <h3>@textForTextbox[i]</h3>
                </div>
            }
        </div>
    </div>
    <div class="container in-game-menu" id="token-menu">
        <div class="fill-content">
            @if(selectedToken is not null)
            { 
                <div class = "row justify-content-center">
                    <div style="min-width: 94px; width: 50%;">
                        <ItemDisplay path="@($"img/tokens/{selectedToken.GetType().Name}.png")" />
                    </div>
                </div>        
                <div class = "row justify-content-center">
                    <h2>@selectedToken.GetType().Name</h2>
                    <h3>Ficha de @playerIdx(GM.GetNumberOfPlayerByToken(selectedToken)).Name</h3>
                </div>
                <div class = "row justify-content-center">
                    <h3>Vida: @(selectedToken.CurrentLife)/@(selectedToken.MaxLife)</h3>
                    <h3>Defensa: @(selectedToken.Defense)</h3>
                    <h3>Fuerza: @(selectedToken.Strength)</h3>
                    <h3>Destreza: @(selectedToken.Ability)</h3>
                    <h3>Velocidad: @(selectedToken.Speed)</h3>
                    @if(selectedToken is PlayableCharacter playable)
                    {
                        <h3>Ataque: @(GetName(playable.TypeOfAttack.ToString()))</h3>
                        <h3>Especial: @((GM.Turn - playable.LastTurnUsingAbility >= playable.AbilityRecoveryTime)? playable.AbilityRecoveryTime: GM.Turn - playable.LastTurnUsingAbility)/@(playable.AbilityRecoveryTime)</h3>
                    }
                </div>
                
            }
            else{
                <p></p>
                <h3>Seleccione una ficha para ver sus estadísticas</h3>
            }
        </div>
    </div>
</div>

@if(warningMessageIsActive)
{
    <MessageBox title="Advertencia:" message="@message" btnMessageConfirm="De Acuerdo" isWithTwoButtons="false" OnConfirm="Confirm" />
}

@if(winningMessageIsActive)
{
    <MessageBox title="Juego Completado:" message="@winningMessage" btnMessageConfirm="Volver al Inicio" isWithTwoButtons="false" OnConfirm="GoHome" />
}

@code{
    GameManager GM = GameManager.GM;
    MovementManager MM = MovementManager.MM;
    AttackManager AM = AttackManager.AM;
    NonActiveTurnManager NATM = NonActiveTurnManager.NATM;
    private List<string> textForTextbox = new List<string>();
    private List<Player> winners = new List<Player>();
    private string winningMessage{
        get{
            string _message = "Felicidades!!!</br>";
            if(GM.IsCoopGame)
            {
                _message += $"Los jugadores ";
                for(int i = 0; i < winners.Count; i++)
                {
                    _message += winners[i].Name;
                    if(i != winners.Count - 1)
                    {
                        _message += ", ";
                    }
                }
                _message += " han ganado el juego";
            }
            else _message += $"El jugador {winners[0].Name} ha ganado el juego.";
            return _message;
        }
    }
    private bool winningMessageIsActive = false;
    private string message = "";
    private bool warningMessageIsActive = false;
    private int numberOfActualPlayer = 1;
    private Player player{
        get{
            if(numberOfActualPlayer <= GM.ActivePlayers.Count) return GM.ActivePlayers[numberOfActualPlayer - 1];
            else return GM.NonActivePlayers[numberOfActualPlayer - GM.ActivePlayers.Count - 1];
        }
    }
    private OperationStatus status = OperationStatus.ActionSelection;
    private Character? selectedToken = null;
    private enum OperationStatus
    {
        Break,
        ActionSelection,
        TokenSelection,
        TokenAction,
        MoveToken,
        MovingToken,
        AttackToken,
        AttackingToken,
        AbilityToken,
        UsingAbilityToken,
        VisibleTraps,
    }

    protected override void OnInitialized()
    {
        Task t = OnInitializedTask();
    }

    async Task OnInitializedTask()
    {
        GM.DefetedToken += DefetedMessage;
        GM.HealedToken += HealedMessage;
        GM.DemagedToken += DemagedMessage;
        GM.PlayerWon += PlayerVictory;
        GM.MessageToken += Message;
        GM.TokenEffectAdd += EffectAddMessage;
        GM.TokenEffectSubstract += EffectSubstractMessage;
        GM.ChangeInMazeMade += RefreshMaze;
        await AddText(["El juego ha comenzado."]);
        await AddText([$"Turno del jugador {numberOfActualPlayer}, {player.Name}."]);
    }

    private string GetName(string attackType)
    {
        switch(attackType)
        {
            case "Short":
                return "Corto";
            case "Large":
                return "Largo";
            case "Distance":
                return "Distancia";
            default:
                return "";
        }
    }

    private Player playerIdx(int index)
    {
        if(index < 1 || index > 5) return new Player("UNKNOWN");
        if(index <= GM.ActivePlayers.Count) return GM.ActivePlayers[index - 1];
        else return GM.NonActivePlayers[index - GM.ActivePlayers.Count - 1];
    }

    private void Confirm(bool isConfirmed)
    {
        if (isConfirmed)
        {
            warningMessageIsActive = false;
        }
    }

    private void GoHome()
    {
        NavMg.NavigateTo("/");    
    }

    private async Task AddText(string[] text)
    {
        await Task.Delay(100);
        for(int i = 0; i < text.Length; i++)
        {
            textForTextbox.Add(text[i]);
        }
        for(int i = 0; i < textForTextbox.Count - 100; i++)
        {
            textForTextbox.RemoveAt(0);
        }
        await GM.EventChangeInMazeMade();
    }

    public async Task Select(int X, int Y, Character? token = null)
    {
        switch(status)
        {
            case OperationStatus.TokenSelection:
                if(token is not null)
                {
                    if(player.Tokens.Contains(token))
                    {
                        selectedToken = token;
                        status = OperationStatus.TokenAction;
                    }
                    else
                    {
                        message = $"Debe seleccionar un token perteneciente a su jugador.</br>Colores:</br>Jugador 1 - {GM.colors[0]}</br>Jugador 2 - {GM.colors[1]}</br>Jugador 3 - {GM.colors[2]}</br>Jugador 4 - {GM.colors[3]}</br>NPC - {GM.colors[4]}";
                        warningMessageIsActive = true;
                    }
                }
                break;
            case OperationStatus.MoveToken:
                Cell destinyCell = GM.maze.Grid[X, Y];
                if(destinyCell.IsColored && selectedToken is PlayableCharacter playableMT)
                {
                    status = OperationStatus.MovingToken;
                    await MM.MoveToken(selectedToken, destinyCell, selectedToken.Speed);
                    playableMT.Moved();
                    await MM.CleanColor();
                    status = OperationStatus.TokenAction;
                }
                break;
            case OperationStatus.AttackToken:
                if(selectedToken is PlayableCharacter playable && token is not null && token.IsTargeted)
                {
                    status = OperationStatus.AttackingToken;
                    int opponentInitialLife = token.CurrentLife;
                    await AddText([$"{selectedToken.GetType().Name} decide atacar a {token.GetType().Name}."]);
                    await Task.Delay(100);
                    if(selectedToken.Attack(token))
                    {
                        await AddText(["Y el ataque es efectivo."]);
                        await Task.Delay(100);
                        await GM.StabilizeToken(token);
                        if(opponentInitialLife > token.CurrentLife) await GM.EventDemagedToken(token, selectedToken, opponentInitialLife - token.CurrentLife);
                        else if(opponentInitialLife < token.CurrentLife) await GM.EventHealedToken(token, selectedToken, token.CurrentLife - opponentInitialLife);
                        await GM.EventChangeInMazeMade();
                    }
                    else
                    {
                        await AddText(["Pero no es efectivo."]);
                        await Task.Delay(100);
                    }
                    await AM.CleanTargets();
                    playable.Attacked();
                    status = OperationStatus.TokenAction;
                }
                break;
            case OperationStatus.AbilityToken:
                if(selectedToken is PlayableCharacter playableAT)
                {
                    status = OperationStatus.UsingAbilityToken;
                    switch(selectedToken.GetType().Name)
                    {
                        case "Hero":
                            if(token is not null && token.IsTargeted)
                            {
                                int opponentInitialLife = token.CurrentLife;
                                await AddText([$"{selectedToken.GetType().Name} decide usar su habilidad ''Espada Sagrada'' en {token.GetType().Name}."]);
                                await Task.Delay(100);
                                if(playableAT.ActivateAbility(GM.Turn, token))
                                {
                                    await AddText(["Y es efectivo."]);
                                    await Task.Delay(100);
                                    await GM.StabilizeToken(token);
                                    if (opponentInitialLife > token.CurrentLife)
                                    {
                                        await GM.EventDemagedToken(token, selectedToken, opponentInitialLife - token.CurrentLife);
                                    }
                                    else if (opponentInitialLife < token.CurrentLife)
                                    {
                                        await GM.EventHealedToken(token, selectedToken, token.CurrentLife - opponentInitialLife);
                                    }
                                    await GM.EventChangeInMazeMade();
                                }
                                else
                                {
                                    await AddText(["Pero no es efectivo."]);
                                    await Task.Delay(100);
                                }
                                await AM.CleanTargets();
                            }
                            break;
                        case "Thief":
                            Cell trapCell = GM.maze.Grid[X, Y];
                            if(trapCell.IsColored && selectedToken is Thief thief)
                            {
                                await AddText([$"{selectedToken.GetType().Name} decide usar su habilidad."]);
                                if(selectedToken.Equals(token))
                                {
                                    thief.ActivateAbility(GM.Turn, MM.GetCellsInRange(trapCell, selectedToken.Speed));
                                    await AddText([$"{selectedToken.GetType().Name} puede ver las trampas cercanas durante 3 segundos."]);
                                    status = OperationStatus.VisibleTraps;
                                    await MM.CleanColor();
                                    return;
                                }
                                else
                                {
                                    await AddText([$"{selectedToken.GetType().Name} intecta interactuar con una trampa."]);
                                    if (trapCell.Interactive is Trap trap)
                                    {
                                        if(!thief.ActivateAbility(GM.Turn, trap))
                                        {
                                            await AddText(["Pero falla."]);
                                        }
                                        else
                                        {
                                            await AddText([$"Y logra {((trap.ActualState == State.Active)? "activar" :"desactivar")} una {trap.GetType().Name}."]);
                                        }
                                    }
                                    else
                                    {
                                        if(!thief.ActivateAbility(GM.Turn))
                                        {
                                            await AddText(["Pero falla."]);
                                        }
                                        else
                                        {
                                            await AddText([$"Pero no hay trampas ahí."]);
                                        }
                                    }
                                }
                            }
                            await MM.CleanColor();
                            break;
                        case "Healer":
                            if(token is not null && token.IsTargeted)
                            {
                                int opponentInitialLife = token.CurrentLife;
                                await AddText([$"{selectedToken.GetType().Name} decide usar su habilidad ''Curación'' en {token.GetType().Name}."]);
                                await Task.Delay(100);
                                if(playableAT.ActivateAbility(GM.Turn, token))
                                {
                                    await AddText(["Y es efectivo."]);
                                    await Task.Delay(100);
                                    await GM.StabilizeToken(token);
                                    if (opponentInitialLife > token.CurrentLife)
                                    {
                                        await GM.EventDemagedToken(token, selectedToken, opponentInitialLife - token.CurrentLife);
                                    }
                                    else if (opponentInitialLife < token.CurrentLife)
                                    {
                                        await GM.EventHealedToken(token, selectedToken, token.CurrentLife - opponentInitialLife);
                                    }
                                    await GM.EventChangeInMazeMade();
                                }
                                else
                                {
                                    await AddText(["Pero no es efectivo."]);
                                    await Task.Delay(100);
                                }
                                await AM.CleanTargets();
                            }
                            break;
                        case "Archer":
                            if(token is not null && token.IsTargeted)
                            {
                                int opponentInitialLife = token.CurrentLife;
                                await AddText([$"{selectedToken.GetType().Name} decide usar su habilidad ''Flecha Guiada'' en {token.GetType().Name}."]);
                                await Task.Delay(100);
                                if(playableAT.ActivateAbility(GM.Turn, token))
                                {
                                    await AddText(["Y es efectivo."]);
                                    await Task.Delay(100);
                                    await GM.StabilizeToken(token);
                                    if (opponentInitialLife > token.CurrentLife)
                                    {
                                        await GM.EventDemagedToken(token, selectedToken, opponentInitialLife - token.CurrentLife);
                                    }
                                    else if (opponentInitialLife < token.CurrentLife)
                                    {
                                        await GM.EventHealedToken(token, selectedToken, token.CurrentLife - opponentInitialLife);
                                    }
                                    await GM.EventChangeInMazeMade();
                                }
                                else
                                {
                                    await AddText(["Pero no es efectivo."]);
                                    await Task.Delay(100);
                                }
                                await AM.CleanTargets();
                            }
                            break;
                        default:
                            break;
                    }
                    status = OperationStatus.TokenAction;
                }
                break;
            case OperationStatus.TokenAction or OperationStatus.MovingToken or OperationStatus.AttackingToken or OperationStatus.UsingAbilityToken or OperationStatus.VisibleTraps:
                break;
            default:
                if(token is not null) selectedToken = token;
                break;
        }
    }

    private async Task Move()
    {
        if(selectedToken is PlayableCharacter playable && playable.HasMoved == false && playable.RemainingTurnsIced <= 0)
        {
            List<(Cell cell, int distance)> cellsWithDistance = MM.GetCellsInRange(GM.maze.Grid[selectedToken.X, selectedToken.Y], selectedToken.Speed);
            List<Cell> cells = new List<Cell>();
            foreach ((Cell cell, int distance) cell in cellsWithDistance)
            {
                cells.Add(cell.cell);
            }
            await MM.ColorCells(cells);
            status = OperationStatus.MoveToken;
        }
        else
        {
            message = "El token seleccionado no puede realizar esta operación, verifique que no se haya movido en este turno y que no se encuentre congelado.";
            warningMessageIsActive = true;
        }
    }

    private void Attack()
    {
        if(selectedToken is PlayableCharacter playable && playable.HasAttacked == false && playable.RemainingTurnsIced <= 0)
        {
            List<Character> opponents = AM.GetPossibleOpponents(playable);
            AM.TargetCharacters(opponents);
            status = OperationStatus.AttackToken;
        }
        else
        {
            message = "El token seleccionado no puede realizar esta operación, verifique que no haya usado su ataque en este turno y que no se encuentre congelado.";
            warningMessageIsActive = true;
        }
    }

    private async Task Ability()
    {
        if(selectedToken is PlayableCharacter playable && playable.LastTurnUsingAbility + playable.AbilityRecoveryTime - GM.Turn <= 0 && playable.RemainingTurnsIced <= 0)
        {
            switch(playable.GetType().Name)
            {
                case "Hero":
                    List<Character> opponentsHero = AM.GetPossibleOpponents(selectedToken);
                    await AM.TargetCharacters(opponentsHero);
                    status = OperationStatus.AbilityToken;
                    break;
                case "Thief":
                    List<(Cell cell, int distance)> cellsWithDistance = MM.GetCellsInRange(GM.maze.Grid[selectedToken.X, selectedToken.Y], selectedToken.Speed);
                    List<Cell> cellsThieft = new List<Cell>();
                    foreach ((Cell cell, int distance) cell in cellsWithDistance)
                    {
                        cellsThieft.Add(cell.cell);
                    }
                    cellsThieft.Add(GM.maze.Grid[selectedToken.X, selectedToken.Y]);
                    await MM.ColorCells(cellsThieft);
                    status = OperationStatus.AbilityToken;
                    break;
                case "Healer": 
                    List<Character> friends = AM.GetPossibleFriends(selectedToken);
                    await AM.TargetCharacters(friends);
                    status = OperationStatus.AbilityToken;
                    break;
                case "Paladin":
                    if(selectedToken is Paladin paladin)
                    {
                        await AddText([$"{selectedToken.GetType().Name} decide usar su habilidad."]);
                        if(paladin.ActivateAbility(GM.Turn))
                        {
                            await AddText([$"{selectedToken.GetType().Name} aumenta su defensa en {paladin.Ability} por los siguientes {paladin.AbilityRecoveryTime} turnos."]);
                        }
                    }
                    break;
                case "Archer":
                    Cell initialCell = GM.maze.Grid[selectedToken.X, selectedToken.Y];
                    List<Character> opponents = AM.GetPossibleOpponents(selectedToken);
                    List<Character> possibleOpponents = new List<Character>();
                    List<Cell> cells = AM.GetCellsAtDistance(initialCell, 4);
                    cells.AddRange(AM.GetCellsAtDistance(initialCell, 5));
                    cells.AddRange(AM.GetCellsAtDistance(initialCell, 6));
                    cells.AddRange(AM.GetCellsAtDistance(initialCell, 7));
                    cells.AddRange(AM.GetCellsAtDistance(initialCell, 8));
                    cells.AddRange(AM.GetCellsAtDistance(initialCell, 9));
                    cells.AddRange(AM.GetCellsAtDistance(initialCell, 10));
                    foreach (Cell cell in cells)
                    {
                        possibleOpponents.AddRange(GM.GetCharactersInCell(cell));
                    }
                    foreach (Character character in possibleOpponents)
                    {
                        if (GM.IsCoopGame)
                        {
                            switch (numberOfActualPlayer)
                            {
                                case 0 or 2:
                                    if (!GM.ActivePlayers[0].Tokens.Contains(character) && ((GM.ActivePlayers.Count > 2 && !GM.ActivePlayers[2].Tokens.Contains(character)) || (GM.ActivePlayers.Count <= 2 && !GM.NonActivePlayers[2 - GM.ActivePlayers.Count].Tokens.Contains(character))))
                                    {
                                        opponents.Add(character);
                                    }
                                    break;
                                case 1 or 3:
                                    if (!GM.ActivePlayers[1].Tokens.Contains(character) && ((GM.ActivePlayers.Count > 3 && !GM.ActivePlayers[3].Tokens.Contains(character)) || (GM.ActivePlayers.Count <= 3 && !GM.NonActivePlayers[3 - GM.ActivePlayers.Count].Tokens.Contains(character))))
                                    {
                                        opponents.Add(character);
                                    }
                                    break;
                                default:
                                    opponents.Add(character);
                                    break;
                            }
                        }
                        else if ((!character.Equals(selectedToken) && player == GM.NonActivePlayers[GM.NonActivePlayers.Count - 1]) || !player.Tokens.Contains(character))
                        {
                            opponents.Add(character);
                            continue;
                        }
                    }
                    await AM.TargetCharacters(opponents);
                    status = OperationStatus.AbilityToken;
                    break;
                default:
                    break;
            }
        }
        else
        {
            message = "El token seleccionado no puede realizar esta operación, verifique que pueda usar su habilidad y que no se encuentre congelado.";
            warningMessageIsActive = true;
        }
    }

    private async Task Back()
    {
        switch(status)
        {
            case OperationStatus.MoveToken or OperationStatus.AttackToken or OperationStatus.AbilityToken:
                await MM.CleanColor();
                await AM.CleanTargets();
                status = OperationStatus.TokenAction;
                break;
            case OperationStatus.TokenSelection or OperationStatus.TokenAction:
                await MM.CleanColor();
                await AM.CleanTargets();
                status = OperationStatus.ActionSelection;
                break;
            case OperationStatus.VisibleTraps:
                if(selectedToken is not null)
                {
                    foreach((Cell cell, int distance) cell in MM.GetCellsInRange(GM.maze.Grid[selectedToken.X, selectedToken.Y], selectedToken.Speed))
                    {
                        if(cell.cell.Interactive is Trap trap) trap.ChangeVisibility(false);
                    }
                    await AddText([$"{selectedToken.GetType().Name} ya no ve las trampas."]);
                    status = OperationStatus.TokenAction;
                }
                else status = OperationStatus.ActionSelection;
                break;
            default:
                break;
        }
    }

    private async Task PassTurn()
    {
        await MM.CleanColor();
        await AM.CleanTargets();
        status = OperationStatus.Break;
        selectedToken = null;
        numberOfActualPlayer++;
        if(numberOfActualPlayer <= GM.ActivePlayers.Count)
        {
            await AddText([$"Turno del jugador {numberOfActualPlayer}, {player.Name}."]);
            status = OperationStatus.ActionSelection;
        }
        else if(numberOfActualPlayer == 5)
        {
            Character character;
            for(int i = 0; i < GM.NonActivePlayers[4 - GM.ActivePlayers.Count].Tokens.Count; i++)
            {
                character = GM.NonActivePlayers[4 - GM.ActivePlayers.Count].Tokens[i];
                if (character is NPC npc) await NATM.PerformTurn(npc);
            }
            await MM.CleanColor();
            await AM.CleanTargets();
            numberOfActualPlayer = 1;
            await GM.EventPassTurn();
            await AddText([$"Turno del jugador {numberOfActualPlayer}, {player.Name}."]);
            status = OperationStatus.ActionSelection;
        }
        else if(GM.PlayWithBots)
        {
            //foreach(PlayableCharacter playable in player.Tokens)
            //{
            //    NATM.TakeTurn(playable)
            //}
            await PassTurn();
        }
        else
        {
            await PassTurn();
        }
    }

    public async Task DefetedMessage(Character affectedCharacter, Interactive? modificaterObject, int modificator)
    {
        if(modificator == 0)
        {
            string text = $"{affectedCharacter.GetType().Name} ha sido derrotado";
            if (modificaterObject is not null) text += $" por {modificaterObject.GetType().Name}.";
            else text += ".";
            await AddText([text]);
        }
    }

    public async Task HealedMessage(Character affectedCharacter, Interactive? modificaterObject, int modificator)
    {
        if(modificator <= 0)
        {
            await AddText([$"{affectedCharacter.GetType().Name} se mantiene igual."]);
            if (modificaterObject is not null) 
            {
                await AddText([$"{modificaterObject.GetType().Name} no efectivo."]);
            }
        }
        else
        {
            string text = $"{affectedCharacter.GetType().Name} ha restaurado {modificator} de vida";
            if (modificaterObject is not null) text += $" gracias a {modificaterObject.GetType().Name}.";
            else text += ".";
            await AddText([text]);
        }
    }

    public async Task DemagedMessage(Character affectedCharacter, Interactive? modificaterObject, int modificator)
    {
        if(modificator <= 0)
        {
            await AddText([$"{affectedCharacter.GetType().Name} se mantiene igual."]);
            if (modificaterObject is not null) 
            {
                await AddText([$"{modificaterObject.GetType().Name} no efectivo."]);
            }
        }
        else
        {
            string text = $"{affectedCharacter.GetType().Name} ha perdido {modificator} de vida";
            if (modificaterObject is not null) text += $" debido a {modificaterObject.GetType().Name}.";
            else text += ".";
            await AddText([text]);
        }
    }

    public async Task EffectAddMessage(Character affectedCharacter, Interactive? modificaterObject, int modificator)
    {
        string text;
        if (modificator >= 0 && modificator < 3)
        {
            string effect = (modificator == 0)? "Ardiendo" : (modificator == 1)? "Congelado" : "Envenenado";
            text = $"{affectedCharacter.GetType().Name} ha obtenido el efecto {effect}";
            if (modificaterObject is not null) text += $" debido a {modificaterObject.GetType().Name}.";
            else text += ".";
            await AddText([text]);
        }
        else
        {
            text = $"{affectedCharacter.GetType().Name} ha obtenido un nuevo efecto";
            if (modificaterObject is not null) text += $" debido a {modificaterObject.GetType().Name}.";
            else text += ".";
            await AddText([text]);
        }
    }

    public async Task EffectSubstractMessage(Character affectedCharacter, Interactive? modificaterObject, int modificator)
    {
        string text;
        if (modificator >= 0 && modificator < 3)
        {
            string effect = (modificator == 0)? "Ardiendo" : (modificator == 1)? "Congelado" : "Envenenado";
            text = $"{affectedCharacter.GetType().Name} ha perdido el efecto {effect}";
            if (modificaterObject is not null) text += $" gracias a {modificaterObject.GetType().Name}.";
            else text += ".";
            await AddText([text]);
        }
        else
        {
            text = $"{affectedCharacter.GetType().Name} ha perdido un efecto";
            if (modificaterObject is not null) text += $" debido a {modificaterObject.GetType().Name}.";
            else text += ".";
            await AddText([text]);
        }
    }

    public async Task Message(Character affectedCharacter, Interactive? modificaterObject, int modificator)
    {
        if(modificator == 0 && modificaterObject is not null)
        {
            await AddText([$"{affectedCharacter.GetType().Name} ha evadido a {modificaterObject.GetType().Name}."]);
        }
        else
        {
            if(modificaterObject is null)
            {
                await AddText([$"{affectedCharacter.GetType().Name} ha interactuado con un objeto desconocido"]);
                return;
            }
            switch(modificaterObject.GetType().Name)
            {
                case "PrisonTrap":
                    await AddText([$"{affectedCharacter.GetType().Name} ha sido atrapado por {modificaterObject.GetType().Name}."]);
                    break;
                case "FireTrap" or "IceTrap" or "PoisonTrap":
                    string type = (modificaterObject is FireTrap)? "pasos" : "turnos";
                    string effect = (modificaterObject is FireTrap)? "Ardiendo" : (modificaterObject is IceTrap)? "Congelado" : "Envenenado";
                    await AddText([$"{affectedCharacter.GetType().Name} tendrá el efecto {effect} aumentado en {modificator} {type} por {modificaterObject.GetType().Name}."]);
                    break;
                default:
                    await AddText([$"{affectedCharacter.GetType().Name} ha interactuado con {modificaterObject.GetType().Name}."]);
                    break;
            }
        }
    }

    public async Task RefreshMaze()
    {
        this.StateHasChanged();
        await Task.Yield();
    }

    public async Task PlayerVictory(Player winner)
    {
        await Task.Delay(100);
        int numberOfPlayer = 5;
        if (GM.ActivePlayers.Contains(winner)) numberOfPlayer = GM.ActivePlayers.IndexOf(winner);
        else if (GM.NonActivePlayers.Contains(winner)) numberOfPlayer = GM.NonActivePlayers.IndexOf(winner) + GM.ActivePlayers.Count;
        if (numberOfPlayer < 5)
        {
            if (GM.IsCoopGame)
            {
                numberOfPlayer %= 2;
                if (GM.ActivePlayers.Count > numberOfPlayer + 2) winner = GM.ActivePlayers[numberOfPlayer + 2];
                else winner = GM.NonActivePlayers[numberOfPlayer + 2 - GM.ActivePlayers.Count];
                winners.Add(GM.ActivePlayers[numberOfPlayer]);
                winners.Add(winner);
            }
            else
            {
                winners.Add(winner);
            }
            winningMessageIsActive = true;
        }
    }
}